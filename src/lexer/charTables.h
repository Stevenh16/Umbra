#pragma once
namespace umbra{

#define CHAR_TRUE 1
#define CHAR_FALSE 0

#define IS_ALPHA(c) \
    ((unsigned char)(c) <= 255 ? is_alpha_table[(unsigned char)(c)] : 0)

constexpr unsigned char is_alpha_table[256] = {
    /* 0–64 */
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,

    /* 65–90 'A'-'Z' */
    CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE,
    CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE,
    CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE,
    CHAR_TRUE, CHAR_TRUE,

    /* 91–94 */
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,

    CHAR_FALSE,

    /* 95 '_' */
    CHAR_TRUE,

    /* 97–122 'a'-'z' */
    CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE,
    CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE,
    CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE, CHAR_TRUE,
    CHAR_TRUE, CHAR_TRUE,

    /* 123–255 */
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE
};

#define IS_DIGIT(c) \
    ((unsigned char)(c) <= 255 ? is_digit_table[(unsigned char)(c)] : 0)

constexpr unsigned char is_digit_table[256] = {
    // 0–47 (no son dígitos)
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,

    // 48–57 ('0'–'9')
    CHAR_TRUE,  CHAR_TRUE,  CHAR_TRUE,  CHAR_TRUE,  CHAR_TRUE,
    CHAR_TRUE,  CHAR_TRUE,  CHAR_TRUE,  CHAR_TRUE,  CHAR_TRUE,

    // 58–255 (no son dígitos)
    CHAR_FALSE, /* para ASCII 58 ':' */
    CHAR_FALSE, /* 59 ';' */
    CHAR_FALSE, /* 60 '<' */
    CHAR_FALSE, /* 61 '=' */
    CHAR_FALSE, /* 62 '>' */
    CHAR_FALSE, /* 63 '?' */
    CHAR_FALSE, /* 64 '@' */
    CHAR_FALSE, /* 65 'A', ... en adelante */
    // ... continúa CHAR_FALSE hasta completar todos los índices hasta el 255
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    // ...
    // (Asegúrate de rellenar con CHAR_FALSE el resto de los valores hasta 255)
};

#define IS_WHITESPACE(c) \
    ((unsigned char)(c) <= 255 ? is_ws_table[(unsigned char)(c)] : 0)

constexpr unsigned char is_ws_table[256] = {
    /* 0-8 */ CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    /* 9 '\t' */ CHAR_TRUE,
    /* 10 */ CHAR_FALSE,
    /* 11-12 */ CHAR_FALSE, CHAR_FALSE,
    /* 13 '\r' */ CHAR_TRUE,
    /* 14-31 */ CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    /* 32 ' ' */ CHAR_TRUE,
    /* 33-126 */ CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
    CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE, CHAR_FALSE,
};

#define IS_ALNUM(c) (IS_ALPHA(c) || IS_DIGIT(c))


}
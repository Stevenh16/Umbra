
/*
<program> ::= { <function_definition> }

<function_definition> ::= "func" <identifier> "(" [ <parameter_list> ] ")" "->" <type> "{" <statement_list> "}" <newline>

<parameter_list> ::= <param> { "," <param> }

<param> ::= <type> <identifier>

<type> ::= <simple_type> { "[]" }
<simple_type> ::= "int" | "float" | "bool" | "char" | "string"

<statement_list> ::= { <statement> <newline> }

<statement> ::= <variable_declaration>
              | <assignment_statement>
              | <conditional>
              | <repeat>
              | <repeat_if>
              | <memory_management>
              | <return_statement>
              | <struct_definition>
              | <classic_for>
              | <expression>

<constructor_statement> ::= <identifier> "(" ")"

<struct_definition> ::= "struct" <identifier> "=" "{" <newline> <field_list>? "}" <newline>

<field_list> ::= <field> <newline> (<field> <newline>)*

<field> ::= <identifier> : <type>

<variable_declaration> ::= <type> <identifier> [ "=" <expression> ]

<assignment_statement> ::= <identifier> [ "[" <expression> "]" ] "=" <expression>

<conditional> ::= "if" <expression> "{" <statement_list> "}" { "elseif" <expression> "{" <statement_list> "}" } [ "else" "{" <statement_list> "}" ] <newline>

<repeat> ::= "repeat" ( <integer_literal> "times") "{" <statement_list> "}"

<repeat_if> ::= "repeat" "if" <expression> "{" <statement_list> "}"

<classic_for> ::= "for" "(" <for_init> ";" <expression>? ";" <for_update> ")" "{" <statement_list> "}"

<for_init>   ::= <variable_declaration> | <assignment_statement> | ε

<for_update> ::= <assignment_statement> | <function_call> | ε

<memory_management> ::= "new" <type> "[" <expression> "]"
                      | "delete" <identifier>

<return_statement> ::= "return" <expression>

<expression> ::= <logical_or_expression>

<logical_or_expression> ::= <logical_and_expression> { "or" <logical_and_expression> }

<logical_and_expression> ::= <equality_expression> { "and" <equality_expression> }

<equality_expression> ::= <relational_expression> [ "equal" <relational_expression> ]

<relational_expression> ::= <additive_expression> [ ( ">" | "<" | ">=" | "<=" ) <additive_expression> ]

<additive_expression> ::= <multiplicative_expression> { ( "+" | "-" ) <multiplicative_expression> }

<multiplicative_expression> ::= <unary_expression> { ( "*" | "/" | "%" ) <unary_expression> }

<unary_expression> ::= [ ( "ptr" | "ref" | "access" ) ] <primary_expression>

<primary_expression> ::= <identifier>
                       | <literal>
                       | <function_call>
                       | "(" <expression> ")"

<function_call> ::= <identifier> "(" [ <argument_list> ] ")"

<argument_list> ::= <expression> { "," <expression> }

<literal> ::= <numeric_literal> | <bool_literal> | <char_literal> | <string_literal>

<numeric_literal> ::= <integer_literal> [ "." <integer_literal> ]

<integer_literal> ::= <digit> { <digit> }

<bool_literal> ::= "true" | "false"

<char_literal> ::= "'" <any_char> "'"

<string_literal> ::= '"' { <any_char> } '"'

<identifier> ::= <letter> { <letter> | <digit> }

<newline> ::= "\\n"

<letter> ::= "A" | ... | "Z" | "a" | ... | "z"

<digit> ::= "0" | ... | "9"

<any_char> ::= cualquier carácter válido excepto comillas no escapadas

*/
